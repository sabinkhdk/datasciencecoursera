which R
which()
which(R)
r.data=rand(100,1)
r.data=random(100,1)
r.data-->random(100,1)
r.data<-c(1,2,3)
r.data[1]
q()
tmp.data<-c(10,20,30,20,10)
barplot(tmp)
barplot(tmp.data)
tmp2.data<-c(5,4,3,10,5)
scatterplot(tmp.data,tmp1.data)
scatter(tmp.data,tmp1.data)
plot(tmp.data,tmp1.data)
plot(tmp.data,tmp2.data)
scatterplot
plot
plot(tmp.data,tmp2.data,'bla','bla')
plot(tmp.data,tmp2.data,"bla","bla")
plot(tmp.data,tmp2.data,xlab="bla",ylab="bla")
plot(tmp.data,tmp2.data,main="bla",xlab="bla",ylab="bla")
getwd()
library(datasets)
data(iris)
iris
??iris
View(iris)
View(iris)
mean(iris[,1],Species="setosa")
mean(iris[1:2,1])
mean(iris[,1],Species="virginica")
apply
help(apply)
apply(iris,mean)
apply(iris,,mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
clear
clc
library(datasets)
data(mtcars)
?mtcars
?mtcars
data(mtcars)
?mtcars
mtcars
View(mtcars)
View(mtcars)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
t=sapply(split(mtcars$mpg, mtcars$cyl), mean)
t<-sapply(split(mtcars$mpg, mtcars$cyl), mean)
t
t[,1]-t[,3]
t[,1]
t$1
15.1-26.66364
ls
ls()
debug(ls)
debug(ls)
ls
stop
dir()
library(datasets)
data(iris)
iris
q()
q()
quit()
library(datasets)
data(iris)
iris
View(iris)
apply(iris)
help(apply)
mean(iris[,1],Species='setosa')
mean(iris[,1],Species='verginica')
mean(iris[,1],Species='virginica')
mean(iris[,1],Species="virginica")
apply(iris,mean)
apply(iris[, 1:4], 2, mean)
apply(iris$Sepal.Length, iris$Species='virginica', mean)
apply(iris,iris$Species,mean)
apply(iris,iris$Species=virginica,mean)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1],2,mean)
apply(iris[,1],,mean)
apply(iris[,1],Species,mean)
apply(iris[,1],iris$Species,mean)
apply(iris[,1],iris$Sepal.Length,mean)
apply(iris,iris$Sepal.Length,mean)
sapply(split(iris$Sepal.Length, iris$Species),mean)
apply(iris, 2, mean)
sapply(split(iris$Sepal.Length, iris$Species),mean)
apply(iris[, 1:4], 2, mean)
sapply(split(iris$Species, iris$Sepal.Length),mean)
sapply(split(iris$Sepal.Length, iris$Species),mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
library(datasets)
data(iris)
apply(iris,iris$Species,mean)
apply(iris,iris$Species=virginica,mean)
apply(iris[,1],iris$Species,mean)
apply(iris,iris$Sepal.Length,mean)
sapply(split(iris$Sepal.Length, iris$Species),mean)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
quit()
makeCacheMatrix <- function(x = matrix()) {
cached <- NULL ## initiate an empty vector to store inverse
## substitute x in parent environment (i.e. the env of function makeCacheMatrix) with the desired matrix object (y), if inverse is already set, restore to null the value of cached
set <- function(y = matrix()) {
x <<- y
cached <<- NULL
}
get <- function() x ## returns the matrix x stored in the main function
## store the inverse of y to the desired value (cached) in parent environment and return the value of cached
setInverse <- function(invy) {
cached <<- invy
return(cached)
}
getInverse  <- function() cached ## return the value of cached
## store the 4 functions in the function "makeCacheMatrix", so that when we assign makeCacheMatrix to an object, the object has all the 4 functions
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## Given the list from the "makeCacheMatrix function", the "cacheSolve" checks to see if there is already a cached inverse and that it is not NULL.
## If it exists in the memory, it returns a message and the value of cached; else it computes its inverse and set/return it.
cacheSolve <- function(x=makeCacheMatrix(), ...) {
## check if the inverse of x already exists and assign it "Inverse"
Inverse <- x$getInverse()
## check if cached data is not NULL and if it is a matrix
## if so return a message and its value
if(!is.null(Inverse) & is.matrix(Inverse)) {
message("Found and getting cached data ")
return(Inverse)
}
## if no cached matrix found, get the matrix stored with "makeCacheMatrix"
matrix <- x$get()
## compute the inverse of the above matrix
Inverse <- solve(matrix)
## set the value of the inverse and print inverse
x$setInverse(Inverse)
Inverse
}
x<-matrix(runif(9,100,9),3,3)
??runif
help(runif)
x<-matrix(runif(9,9,100),3,3)
x1<-solve(x)
t1<-makeCacheMatrix(x)
t2<-cachesolve(t1)
t2<-cacheSolve(t1)
t2<-cacheSolve(t1)
makeCacheMatrix <- function(x = matrix()) {
# creates special "matrix" object that can cache its inverse matrix
# initialize to store the inverse matrix
xinv <- NULL
# set(): to set matrix to object created by makeCacheMatrix()
set <- function(y) {
x <<- y
xinv <<- NULL
}
# get() to return input matrix
get <- function() x
# setinv(): set inversed matrix in cache
setinv <- function(inverse) xinv <<- inverse
# getinv(): get inversed matrix from cache
getinv <- function() xinv
# return list with set, get, setinv, getinv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
#Function to return matrix of x
mat <- x$getinv()
# checking if the matrix is inversed and already cached
if(!is.null(mat)){
message("getting cached data")
return(mat)
}
# else calculate inverse
rawmat <- x$get()
mat <- solve(rawmat)
x$setinv(mat)
mat
}
x<-matrix(runif(9,9,100),3,3)
t1<-makeCacheMatrix(x)
t2<-cachesolve(t1)
t2<-cacheSolve(t1)
quit()
quit()
read.xlsx()
list.files
list.files()
setwd("~/Documents/DataScience/getdata")
read.xlsx
packages
packages()
help(packages)
libraay(xlsx)
library(xlsx)
read.xlsx
read.xlsx()
list.files()
dt <- read.xlsx("DATA.gov_NGAP.xlsx",sheetIndex=1, colIndex=7:15, rowIndex=18:23)
View(dt)
sum(dt$Zip*dt$Ext,na.rm=T)
install.packages("XML")
library(XML)
q()
